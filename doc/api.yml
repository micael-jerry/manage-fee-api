openapi: 3.0.3
info:
  version: '1.0'
  title: Manage Fee Api
  description: |
    Projet final PROG2

servers:
  - url: 'https://mj.com'

paths:
  '/groups/{id}':
    get:
      tags:
        - Teaching
      summary: Get group by identifier
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      operationId: getGroupById
      responses:
        '200':
          description: The identified group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /groups:
    get:
      tags:
        - Teaching
      summary: Get all groups
      operationId: getGroups
      responses:
        '200':
          description: List of groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Teaching
      summary: Create new groups or update existing groups
      description: Update groups when `id` are provided, create them otherwise.
      operationId: createOrUpdateGroups
      requestBody:
        description: Groups to update
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Group'
      responses:
        '200':
          description: The created or updated groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  '/students/{id}':
    get:
      tags:
        - Users
      summary: Get student by identifier
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      operationId: getStudentById
      responses:
        '200':
          description: The identified student
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /students:
    get:
      tags:
        - Users
      summary: Get all students
      operationId: getStudents
      parameters:
        - name: page
          in: query
          schema:
            $ref: '#/components/schemas/Page'
        - name: page_size
          in: query
          schema:
            $ref: '#/components/schemas/PageSize'
        - name: ref
          in: query
          description: "Filter students by ref, case is ignored"
          schema:
            type: string
        - name: first_name
          in: query
          description: "Filter students by first name, case is ignored"
          schema:
            type: string
        - name: last_name
          in: query
          description: "Filter students by last name, case is ignored"
          schema:
            type: string
      responses:
        '200':
          description: List of students, ordered by ref.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Users
      summary: Create new students or update existing students
      description: Update students when `id` are provided, create them otherwise.
      operationId: createOrUpdateStudents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Student'
      responses:
        '200':
          description: The created or updated students
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/Student'
        
    

  /delay_penalty_change:
    post:
      tags:
        - Paying
      summary: Change current delay penalty configuration
      operationId: createDelayPenaltyChange
      requestBody:
        description: Delay penalties to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDelayPenaltyChange'
      responses:
        '200':
          description: List of created delay penalties
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DelayPenalty'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /delay_penalty:
    get:
      tags:
        - Paying
      summary: Get current delay penalty
      operationId: getDelayPenalty
      responses:
        '200':
          description: Active delay penalty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DelayPenalty'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /students/{student_id}/fees/{fee_id}:
    get:
      tags:
        - Paying
      summary: Get student fee by identifier
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: string
        - name: fee_id
          in: path
          required: true
          schema:
            type: string
      operationId: getStudentFeeById
      responses:
        '200':
          description: Identified student fee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fee'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /students/{student_id}/fees:
    get:
      tags:
        - Paying
      summary: Get all student fees ordered by due datetime desc
      description: Fees can be filtered with an optional payment status parameter.
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            $ref: '#/components/schemas/Page'
        - name: page_size
          in: query
          schema:
            $ref: '#/components/schemas/PageSize'
        - name: status
          in: query
          schema:
            type: string
            enum:
              - UNPAID
              - PAID
              - LATE
      operationId: getStudentFees
      responses:
        '200':
          description: List of all student fees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Fee'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - Paying
      summary: Create student fees
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: string
      operationId: createStudentFees
      requestBody:
        description: Student fees to create
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateFee'
      responses:
        '200':
          description: Created student fees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Fee'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /fees:
    get:
      tags:
        - Paying
      summary: Get all student fees filtered by status
      parameters:
        - name: status
          in: query
          description: "See the PaymentStatus object for its value."
          schema:
            type: string
            default: LATE
            enum:
              - UNPAID
              - LATE
              - PAID
        - name: page
          in: query
          schema:
            $ref: '#/components/schemas/Page'
        - name: page_size
          in: query
          schema:
            $ref: '#/components/schemas/PageSize'
      operationId: getFees
      responses:
        '200':
          description: List of filtered student fees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Fee'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /students/{student_id}/fees/{fee_id}/payments:
    get:
      tags:
        - Paying
      summary: Get all student payments of a specific fee. Resulting list is ordered by creation datetime desc.
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: string
        - name: fee_id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            $ref: '#/components/schemas/Page'
        - name: page_size
          in: query
          schema:
            $ref: '#/components/schemas/PageSize'
      operationId: getStudentPayments
      responses:
        '200':
          description: List of all student payments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - Paying
      summary: Create student payments
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: string
        - name: fee_id
          in: path
          required: true
          schema:
            type: string
      operationId: createStudentPayments
      requestBody:
        description: Student payments to create
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreatePayment'
      responses:
        '200':
          description: Created student payments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'
    '429':
      description: Too many requests to the API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsException'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'
  schemas:
    Whoami:
      properties:
        id:
          type: string
        role:
          type: string
          enum:
            - STUDENT
            - TEACHER
            - MANAGER
        bearer:
          type: string
    User:
      properties:
        id:
          type: string
        ref:
          type: string
          example: STD000001
        first_name:
          type: string
        last_name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
        birth_date:
          type: string
          format: date
        address:
          type: string
        phone:
          type: string
        email:
          type: string
        entrance_datetime:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/EnableStatus'
    EnableStatus:
      type: string
      enum:
        - ENABLED
        - DISABLED
    Student:
      allOf:
        - $ref: '#/components/schemas/User'
    Teacher:
      allOf:
        - $ref: '#/components/schemas/User'
    Manager:
      allOf:
        - $ref: '#/components/schemas/User'
    Group:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          example: The group number one
        ref:
          type: string
          example: G1
        creation_datetime:
          type: string
          format: date-time
    Course:
      type: object
      properties:
        id:
          type: string
        ref:
          type: string
          example: PROG1
        name:
          type: string
          example: Algorithmics
        credits:
          type: integer
        total_hours:
          type: integer
    CreateFee:
      type: object
      properties:
        type:
          type: string
          enum:
            - TUITION
            - HARDWARE
        comment:
          type: string
        total_amount:
          type: integer
        creation_datetime:
          type: string
          format: date-time
        due_datetime:
          type: string
          format: date-time
    Fee:
      allOf:
        - $ref: '#/components/schemas/CreateFee'
      type: object
      properties:
        id:
          type: string
        student_id:
          type: string
        remaining_amount:
          type: integer
        status:
          type: string
          enum:
            - UNPAID
            - PAID
            - LATE
    CreateDelayPenaltyChange:
      type: object
      properties:
        interest_percent:
          type: integer
        interest_timerate:
          type: string
          enum:
            - DAILY
        grace_delay:
          type: integer
        applicability_delay_after_grace:
          type: integer
    DelayPenalty:
      allOf:
        - $ref: '#/components/schemas/CreateDelayPenaltyChange'
      type: object
      properties:
        id:
          type: string
        creation_datetime:
          type: string
          format: date-time
    CreatePayment:
      type: object
      properties:
        type:
          type: string
          enum:
            - CASH
            - MOBILE_MONEY
            - SCHOLARSHIP
            - FIX
        amount:
          type: integer
        comment:
          type: string
    Payment:
      allOf:
        - $ref: '#/components/schemas/CreatePayment'
      type: object
      properties:
        id:
          type: string
        fee_id:
          type: string
        creation_datetime:
          type: string
          format: date-time
    Page:
      type: integer
      description: Start at `1`
    PageSize:
      type: integer
      description: Cannot exceed `500`

    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
    TooManyRequestsException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: TooManyRequestsException
        message: Too many requests
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: InternalServerException
        message: Unexpected error